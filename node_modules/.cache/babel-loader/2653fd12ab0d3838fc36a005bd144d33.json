{"ast":null,"code":"/**\r\n * DevExtreme (esm/localization/ldml/date.parser.js)\r\n * Version: 21.1.4\r\n * Build date: Mon Jun 21 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { escapeRegExp } from \"../../core/utils/common\";\nvar FORMAT_TYPES = {\n  3: \"abbreviated\",\n  4: \"wide\",\n  5: \"narrow\"\n};\n\nvar monthRegExpGenerator = function (count, dateParts) {\n  if (count > 2) {\n    return Object.keys(FORMAT_TYPES).map(function (count) {\n      return [\"format\", \"standalone\"].map(function (type) {\n        return dateParts.getMonthNames(FORMAT_TYPES[count], type).join(\"|\");\n      }).join(\"|\");\n    }).join(\"|\");\n  }\n\n  return \"0?[1-9]|1[012]\";\n};\n\nvar PATTERN_REGEXPS = {\n  \":\": function (count, dateParts) {\n    var countSuffix = count > 1 ? \"{\".concat(count, \"}\") : \"\";\n    return \"\\\\\".concat(dateParts.getTimeSeparator()).concat(countSuffix);\n  },\n  y: function (count) {\n    return \"[0-9]+\";\n  },\n  M: monthRegExpGenerator,\n  L: monthRegExpGenerator,\n  Q: function (count, dateParts) {\n    if (count > 2) {\n      return dateParts.getQuarterNames(FORMAT_TYPES[count], \"format\").join(\"|\");\n    }\n\n    return \"0?[1-4]\";\n  },\n  E: function (count, dateParts) {\n    return \"\\\\D*\";\n  },\n  a: function (count, dateParts) {\n    return dateParts.getPeriodNames(FORMAT_TYPES[count < 3 ? 3 : count], \"format\").join(\"|\");\n  },\n  d: function (count) {\n    return \"0?[1-9]|[12][0-9]|3[01]\";\n  },\n  H: function (count) {\n    return \"0?[0-9]|1[0-9]|2[0-3]\";\n  },\n  h: function (count) {\n    return \"0?[1-9]|1[012]\";\n  },\n  m: function (count) {\n    return \"0?[0-9]|[1-5][0-9]\";\n  },\n  s: function (count) {\n    return \"0?[0-9]|[1-5][0-9]\";\n  },\n  S: function (count) {\n    return \"[0-9]{1,\" + count + \"}\";\n  },\n  w: function (count) {\n    return \"0?[0-9]|[1-5][0-9]\";\n  }\n};\nvar parseNumber = Number;\n\nvar caseInsensitiveIndexOf = function (array, value) {\n  return array.map(item => item.toLowerCase()).indexOf(value.toLowerCase());\n};\n\nvar monthPatternParser = function (text, count, dateParts) {\n  if (count > 2) {\n    return [\"format\", \"standalone\"].map(function (type) {\n      return Object.keys(FORMAT_TYPES).map(function (count) {\n        var monthNames = dateParts.getMonthNames(FORMAT_TYPES[count], type);\n        return caseInsensitiveIndexOf(monthNames, text);\n      });\n    }).reduce(function (a, b) {\n      return a.concat(b);\n    }).filter(function (index) {\n      return index >= 0;\n    })[0];\n  }\n\n  return parseNumber(text) - 1;\n};\n\nvar PATTERN_PARSERS = {\n  y: function (text, count) {\n    var year = parseNumber(text);\n\n    if (2 === count) {\n      return year < 30 ? 2e3 + year : 1900 + year;\n    }\n\n    return year;\n  },\n  M: monthPatternParser,\n  L: monthPatternParser,\n  Q: function (text, count, dateParts) {\n    if (count > 2) {\n      return dateParts.getQuarterNames(FORMAT_TYPES[count], \"format\").indexOf(text);\n    }\n\n    return parseNumber(text) - 1;\n  },\n  E: function (text, count, dateParts) {\n    var dayNames = dateParts.getDayNames(FORMAT_TYPES[count < 3 ? 3 : count], \"format\");\n    return caseInsensitiveIndexOf(dayNames, text);\n  },\n  a: function (text, count, dateParts) {\n    var periodNames = dateParts.getPeriodNames(FORMAT_TYPES[count < 3 ? 3 : count], \"format\");\n    return caseInsensitiveIndexOf(periodNames, text);\n  },\n  d: parseNumber,\n  H: parseNumber,\n  h: parseNumber,\n  m: parseNumber,\n  s: parseNumber,\n  S: function (text, count) {\n    count = Math.max(count, 3);\n    text = text.slice(0, 3);\n\n    while (count < 3) {\n      text += \"0\";\n      count++;\n    }\n\n    return parseNumber(text);\n  }\n};\nvar ORDERED_PATTERNS = [\"y\", \"M\", \"d\", \"h\", \"m\", \"s\", \"S\"];\nvar PATTERN_SETTERS = {\n  y: \"setFullYear\",\n  M: \"setMonth\",\n  L: \"setMonth\",\n  a: function (date, value, datePartValues) {\n    var hours = date.getHours();\n    var hourPartValue = datePartValues.h;\n\n    if (void 0 !== hourPartValue && hourPartValue !== hours) {\n      hours--;\n    }\n\n    if (!value && 12 === hours) {\n      hours = 0;\n    } else if (value && 12 !== hours) {\n      hours += 12;\n    }\n\n    date.setHours(hours);\n  },\n  d: \"setDate\",\n  H: \"setHours\",\n  h: \"setHours\",\n  m: \"setMinutes\",\n  s: \"setSeconds\",\n  S: \"setMilliseconds\"\n};\n\nvar getSameCharCount = function (text, index) {\n  var char = text[index];\n  var count = 0;\n\n  do {\n    index++;\n    count++;\n  } while (text[index] === char);\n\n  return count;\n};\n\nvar createPattern = function (char, count) {\n  var result = \"\";\n\n  for (var i = 0; i < count; i++) {\n    result += char;\n  }\n\n  return result;\n};\n\nexport var getRegExpInfo = function (format, dateParts) {\n  var regexpText = \"\";\n  var stubText = \"\";\n  var isEscaping;\n  var patterns = [];\n\n  var addPreviousStub = function () {\n    if (stubText) {\n      patterns.push(\"'\" + stubText + \"'\");\n      regexpText += escapeRegExp(stubText) + \")\";\n      stubText = \"\";\n    }\n  };\n\n  for (var i = 0; i < format.length; i++) {\n    var char = format[i];\n    var isEscapeChar = \"'\" === char;\n    var regexpPart = PATTERN_REGEXPS[char];\n\n    if (isEscapeChar) {\n      isEscaping = !isEscaping;\n\n      if (\"'\" !== format[i - 1]) {\n        continue;\n      }\n    }\n\n    if (regexpPart && !isEscaping) {\n      var count = getSameCharCount(format, i);\n      var pattern = createPattern(char, count);\n      addPreviousStub();\n      patterns.push(pattern);\n      regexpText += \"(\" + regexpPart(count, dateParts) + \")\";\n      i += count - 1;\n    } else {\n      if (!stubText) {\n        regexpText += \"(\";\n      }\n\n      stubText += char;\n    }\n  }\n\n  addPreviousStub();\n  return {\n    patterns: patterns,\n    regexp: new RegExp(\"^\" + regexpText + \"$\", \"i\")\n  };\n};\nexport var getPatternSetters = function () {\n  return PATTERN_SETTERS;\n};\n\nvar setPatternPart = function (date, pattern, text, dateParts, datePartValues) {\n  var patternChar = pattern[0];\n  var partSetter = PATTERN_SETTERS[patternChar];\n  var partParser = PATTERN_PARSERS[patternChar];\n\n  if (partSetter && partParser) {\n    var value = partParser(text, pattern.length, dateParts);\n    datePartValues[pattern] = value;\n\n    if (date[partSetter]) {\n      date[partSetter](value);\n    } else {\n      partSetter(date, value, datePartValues);\n    }\n  }\n};\n\nvar setPatternPartFromNow = function (date, pattern, now) {\n  var setterName = PATTERN_SETTERS[pattern];\n  var getterName = \"g\" + setterName.substr(1);\n  var value = now[getterName]();\n  date[setterName](value);\n};\n\nvar getShortPatterns = function (fullPatterns) {\n  return fullPatterns.map(function (pattern) {\n    if (\"'\" === pattern[0]) {\n      return \"\";\n    } else {\n      return \"H\" === pattern[0] ? \"h\" : pattern[0];\n    }\n  });\n};\n\nvar getMaxOrderedPatternIndex = function (patterns) {\n  var indexes = patterns.map(function (pattern) {\n    return ORDERED_PATTERNS.indexOf(pattern);\n  });\n  return Math.max.apply(Math, indexes);\n};\n\nvar getOrderedFormatPatterns = function (formatPatterns) {\n  var otherPatterns = formatPatterns.filter(function (pattern) {\n    return ORDERED_PATTERNS.indexOf(pattern) < 0;\n  });\n  return ORDERED_PATTERNS.concat(otherPatterns);\n};\n\nexport var getParser = function (format, dateParts) {\n  var regExpInfo = getRegExpInfo(format, dateParts);\n  return function (text) {\n    var regExpResult = regExpInfo.regexp.exec(text);\n\n    if (regExpResult) {\n      var now = new Date();\n      var date = new Date(now.getFullYear(), 0, 1);\n      var formatPatterns = getShortPatterns(regExpInfo.patterns);\n      var maxPatternIndex = getMaxOrderedPatternIndex(formatPatterns);\n      var orderedFormatPatterns = getOrderedFormatPatterns(formatPatterns);\n      var datePartValues = {};\n      orderedFormatPatterns.forEach(function (pattern, index) {\n        if (!pattern || index < ORDERED_PATTERNS.length && index > maxPatternIndex) {\n          return;\n        }\n\n        var patternIndex = formatPatterns.indexOf(pattern);\n\n        if (patternIndex >= 0) {\n          var regExpPattern = regExpInfo.patterns[patternIndex];\n          var regExpText = regExpResult[patternIndex + 1];\n          setPatternPart(date, regExpPattern, regExpText, dateParts, datePartValues);\n        } else {\n          setPatternPartFromNow(date, pattern, now);\n        }\n      });\n      return date;\n    }\n\n    return null;\n  };\n};","map":{"version":3,"sources":["C:/Users/Abdullah/personal-portfolio/node_modules/devextreme/esm/localization/ldml/date.parser.js"],"names":["escapeRegExp","FORMAT_TYPES","monthRegExpGenerator","count","dateParts","Object","keys","map","type","getMonthNames","join","PATTERN_REGEXPS","countSuffix","concat","getTimeSeparator","y","M","L","Q","getQuarterNames","E","a","getPeriodNames","d","H","h","m","s","S","w","parseNumber","Number","caseInsensitiveIndexOf","array","value","item","toLowerCase","indexOf","monthPatternParser","text","monthNames","reduce","b","filter","index","PATTERN_PARSERS","year","dayNames","getDayNames","periodNames","Math","max","slice","ORDERED_PATTERNS","PATTERN_SETTERS","date","datePartValues","hours","getHours","hourPartValue","setHours","getSameCharCount","char","createPattern","result","i","getRegExpInfo","format","regexpText","stubText","isEscaping","patterns","addPreviousStub","push","length","isEscapeChar","regexpPart","pattern","regexp","RegExp","getPatternSetters","setPatternPart","patternChar","partSetter","partParser","setPatternPartFromNow","now","setterName","getterName","substr","getShortPatterns","fullPatterns","getMaxOrderedPatternIndex","indexes","apply","getOrderedFormatPatterns","formatPatterns","otherPatterns","getParser","regExpInfo","regExpResult","exec","Date","getFullYear","maxPatternIndex","orderedFormatPatterns","forEach","patternIndex","regExpPattern","regExpText"],"mappings":"AAAA;;;;;;;;AAQA,SACIA,YADJ,QAEO,yBAFP;AAGA,IAAIC,YAAY,GAAG;AACf,KAAG,aADY;AAEf,KAAG,MAFY;AAGf,KAAG;AAHY,CAAnB;;AAKA,IAAIC,oBAAoB,GAAG,UAASC,KAAT,EAAgBC,SAAhB,EAA2B;AAClD,MAAID,KAAK,GAAG,CAAZ,EAAe;AACX,WAAOE,MAAM,CAACC,IAAP,CAAYL,YAAZ,EAA0BM,GAA1B,CAA+B,UAASJ,KAAT,EAAgB;AAClD,aAAO,CAAC,QAAD,EAAW,YAAX,EAAyBI,GAAzB,CAA8B,UAASC,IAAT,EAAe;AAChD,eAAOJ,SAAS,CAACK,aAAV,CAAwBR,YAAY,CAACE,KAAD,CAApC,EAA6CK,IAA7C,EAAmDE,IAAnD,CAAwD,GAAxD,CAAP;AACH,OAFM,EAEHA,IAFG,CAEE,GAFF,CAAP;AAGH,KAJM,EAIHA,IAJG,CAIE,GAJF,CAAP;AAKH;;AACD,SAAO,gBAAP;AACH,CATD;;AAUA,IAAIC,eAAe,GAAG;AAClB,OAAK,UAASR,KAAT,EAAgBC,SAAhB,EAA2B;AAC5B,QAAIQ,WAAW,GAAGT,KAAK,GAAG,CAAR,GAAY,IAAIU,MAAJ,CAAWV,KAAX,EAAkB,GAAlB,CAAZ,GAAqC,EAAvD;AACA,WAAO,KAAKU,MAAL,CAAYT,SAAS,CAACU,gBAAV,EAAZ,EAA0CD,MAA1C,CAAiDD,WAAjD,CAAP;AACH,GAJiB;AAKlBG,EAAAA,CAAC,EAAE,UAASZ,KAAT,EAAgB;AACf,WAAO,QAAP;AACH,GAPiB;AAQlBa,EAAAA,CAAC,EAAEd,oBARe;AASlBe,EAAAA,CAAC,EAAEf,oBATe;AAUlBgB,EAAAA,CAAC,EAAE,UAASf,KAAT,EAAgBC,SAAhB,EAA2B;AAC1B,QAAID,KAAK,GAAG,CAAZ,EAAe;AACX,aAAOC,SAAS,CAACe,eAAV,CAA0BlB,YAAY,CAACE,KAAD,CAAtC,EAA+C,QAA/C,EAAyDO,IAAzD,CAA8D,GAA9D,CAAP;AACH;;AACD,WAAO,SAAP;AACH,GAfiB;AAgBlBU,EAAAA,CAAC,EAAE,UAASjB,KAAT,EAAgBC,SAAhB,EAA2B;AAC1B,WAAO,MAAP;AACH,GAlBiB;AAmBlBiB,EAAAA,CAAC,EAAE,UAASlB,KAAT,EAAgBC,SAAhB,EAA2B;AAC1B,WAAOA,SAAS,CAACkB,cAAV,CAAyBrB,YAAY,CAACE,KAAK,GAAG,CAAR,GAAY,CAAZ,GAAgBA,KAAjB,CAArC,EAA8D,QAA9D,EAAwEO,IAAxE,CAA6E,GAA7E,CAAP;AACH,GArBiB;AAsBlBa,EAAAA,CAAC,EAAE,UAASpB,KAAT,EAAgB;AACf,WAAO,yBAAP;AACH,GAxBiB;AAyBlBqB,EAAAA,CAAC,EAAE,UAASrB,KAAT,EAAgB;AACf,WAAO,uBAAP;AACH,GA3BiB;AA4BlBsB,EAAAA,CAAC,EAAE,UAAStB,KAAT,EAAgB;AACf,WAAO,gBAAP;AACH,GA9BiB;AA+BlBuB,EAAAA,CAAC,EAAE,UAASvB,KAAT,EAAgB;AACf,WAAO,oBAAP;AACH,GAjCiB;AAkClBwB,EAAAA,CAAC,EAAE,UAASxB,KAAT,EAAgB;AACf,WAAO,oBAAP;AACH,GApCiB;AAqClByB,EAAAA,CAAC,EAAE,UAASzB,KAAT,EAAgB;AACf,WAAO,aAAaA,KAAb,GAAqB,GAA5B;AACH,GAvCiB;AAwClB0B,EAAAA,CAAC,EAAE,UAAS1B,KAAT,EAAgB;AACf,WAAO,oBAAP;AACH;AA1CiB,CAAtB;AA4CA,IAAI2B,WAAW,GAAGC,MAAlB;;AACA,IAAIC,sBAAsB,GAAG,UAASC,KAAT,EAAgBC,KAAhB,EAAuB;AAChD,SAAOD,KAAK,CAAC1B,GAAN,CAAU4B,IAAI,IAAIA,IAAI,CAACC,WAAL,EAAlB,EAAsCC,OAAtC,CAA8CH,KAAK,CAACE,WAAN,EAA9C,CAAP;AACH,CAFD;;AAGA,IAAIE,kBAAkB,GAAG,UAASC,IAAT,EAAepC,KAAf,EAAsBC,SAAtB,EAAiC;AACtD,MAAID,KAAK,GAAG,CAAZ,EAAe;AACX,WAAO,CAAC,QAAD,EAAW,YAAX,EAAyBI,GAAzB,CAA8B,UAASC,IAAT,EAAe;AAChD,aAAOH,MAAM,CAACC,IAAP,CAAYL,YAAZ,EAA0BM,GAA1B,CAA+B,UAASJ,KAAT,EAAgB;AAClD,YAAIqC,UAAU,GAAGpC,SAAS,CAACK,aAAV,CAAwBR,YAAY,CAACE,KAAD,CAApC,EAA6CK,IAA7C,CAAjB;AACA,eAAOwB,sBAAsB,CAACQ,UAAD,EAAaD,IAAb,CAA7B;AACH,OAHM,CAAP;AAIH,KALM,EAKHE,MALG,CAKK,UAASpB,CAAT,EAAYqB,CAAZ,EAAe;AACvB,aAAOrB,CAAC,CAACR,MAAF,CAAS6B,CAAT,CAAP;AACH,KAPM,EAOHC,MAPG,CAOK,UAASC,KAAT,EAAgB;AACxB,aAAOA,KAAK,IAAI,CAAhB;AACH,KATM,EASH,CATG,CAAP;AAUH;;AACD,SAAOd,WAAW,CAACS,IAAD,CAAX,GAAoB,CAA3B;AACH,CAdD;;AAeA,IAAIM,eAAe,GAAG;AAClB9B,EAAAA,CAAC,EAAE,UAASwB,IAAT,EAAepC,KAAf,EAAsB;AACrB,QAAI2C,IAAI,GAAGhB,WAAW,CAACS,IAAD,CAAtB;;AACA,QAAI,MAAMpC,KAAV,EAAiB;AACb,aAAO2C,IAAI,GAAG,EAAP,GAAY,MAAMA,IAAlB,GAAyB,OAAOA,IAAvC;AACH;;AACD,WAAOA,IAAP;AACH,GAPiB;AAQlB9B,EAAAA,CAAC,EAAEsB,kBARe;AASlBrB,EAAAA,CAAC,EAAEqB,kBATe;AAUlBpB,EAAAA,CAAC,EAAE,UAASqB,IAAT,EAAepC,KAAf,EAAsBC,SAAtB,EAAiC;AAChC,QAAID,KAAK,GAAG,CAAZ,EAAe;AACX,aAAOC,SAAS,CAACe,eAAV,CAA0BlB,YAAY,CAACE,KAAD,CAAtC,EAA+C,QAA/C,EAAyDkC,OAAzD,CAAiEE,IAAjE,CAAP;AACH;;AACD,WAAOT,WAAW,CAACS,IAAD,CAAX,GAAoB,CAA3B;AACH,GAfiB;AAgBlBnB,EAAAA,CAAC,EAAE,UAASmB,IAAT,EAAepC,KAAf,EAAsBC,SAAtB,EAAiC;AAChC,QAAI2C,QAAQ,GAAG3C,SAAS,CAAC4C,WAAV,CAAsB/C,YAAY,CAACE,KAAK,GAAG,CAAR,GAAY,CAAZ,GAAgBA,KAAjB,CAAlC,EAA2D,QAA3D,CAAf;AACA,WAAO6B,sBAAsB,CAACe,QAAD,EAAWR,IAAX,CAA7B;AACH,GAnBiB;AAoBlBlB,EAAAA,CAAC,EAAE,UAASkB,IAAT,EAAepC,KAAf,EAAsBC,SAAtB,EAAiC;AAChC,QAAI6C,WAAW,GAAG7C,SAAS,CAACkB,cAAV,CAAyBrB,YAAY,CAACE,KAAK,GAAG,CAAR,GAAY,CAAZ,GAAgBA,KAAjB,CAArC,EAA8D,QAA9D,CAAlB;AACA,WAAO6B,sBAAsB,CAACiB,WAAD,EAAcV,IAAd,CAA7B;AACH,GAvBiB;AAwBlBhB,EAAAA,CAAC,EAAEO,WAxBe;AAyBlBN,EAAAA,CAAC,EAAEM,WAzBe;AA0BlBL,EAAAA,CAAC,EAAEK,WA1Be;AA2BlBJ,EAAAA,CAAC,EAAEI,WA3Be;AA4BlBH,EAAAA,CAAC,EAAEG,WA5Be;AA6BlBF,EAAAA,CAAC,EAAE,UAASW,IAAT,EAAepC,KAAf,EAAsB;AACrBA,IAAAA,KAAK,GAAG+C,IAAI,CAACC,GAAL,CAAShD,KAAT,EAAgB,CAAhB,CAAR;AACAoC,IAAAA,IAAI,GAAGA,IAAI,CAACa,KAAL,CAAW,CAAX,EAAc,CAAd,CAAP;;AACA,WAAOjD,KAAK,GAAG,CAAf,EAAkB;AACdoC,MAAAA,IAAI,IAAI,GAAR;AACApC,MAAAA,KAAK;AACR;;AACD,WAAO2B,WAAW,CAACS,IAAD,CAAlB;AACH;AArCiB,CAAtB;AAuCA,IAAIc,gBAAgB,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,CAAvB;AACA,IAAIC,eAAe,GAAG;AAClBvC,EAAAA,CAAC,EAAE,aADe;AAElBC,EAAAA,CAAC,EAAE,UAFe;AAGlBC,EAAAA,CAAC,EAAE,UAHe;AAIlBI,EAAAA,CAAC,EAAE,UAASkC,IAAT,EAAerB,KAAf,EAAsBsB,cAAtB,EAAsC;AACrC,QAAIC,KAAK,GAAGF,IAAI,CAACG,QAAL,EAAZ;AACA,QAAIC,aAAa,GAAGH,cAAc,CAAC/B,CAAnC;;AACA,QAAI,KAAK,CAAL,KAAWkC,aAAX,IAA4BA,aAAa,KAAKF,KAAlD,EAAyD;AACrDA,MAAAA,KAAK;AACR;;AACD,QAAI,CAACvB,KAAD,IAAU,OAAOuB,KAArB,EAA4B;AACxBA,MAAAA,KAAK,GAAG,CAAR;AACH,KAFD,MAEO,IAAIvB,KAAK,IAAI,OAAOuB,KAApB,EAA2B;AAC9BA,MAAAA,KAAK,IAAI,EAAT;AACH;;AACDF,IAAAA,IAAI,CAACK,QAAL,CAAcH,KAAd;AACH,GAhBiB;AAiBlBlC,EAAAA,CAAC,EAAE,SAjBe;AAkBlBC,EAAAA,CAAC,EAAE,UAlBe;AAmBlBC,EAAAA,CAAC,EAAE,UAnBe;AAoBlBC,EAAAA,CAAC,EAAE,YApBe;AAqBlBC,EAAAA,CAAC,EAAE,YArBe;AAsBlBC,EAAAA,CAAC,EAAE;AAtBe,CAAtB;;AAwBA,IAAIiC,gBAAgB,GAAG,UAAStB,IAAT,EAAeK,KAAf,EAAsB;AACzC,MAAIkB,IAAI,GAAGvB,IAAI,CAACK,KAAD,CAAf;AACA,MAAIzC,KAAK,GAAG,CAAZ;;AACA,KAAG;AACCyC,IAAAA,KAAK;AACLzC,IAAAA,KAAK;AACR,GAHD,QAGSoC,IAAI,CAACK,KAAD,CAAJ,KAAgBkB,IAHzB;;AAIA,SAAO3D,KAAP;AACH,CARD;;AASA,IAAI4D,aAAa,GAAG,UAASD,IAAT,EAAe3D,KAAf,EAAsB;AACtC,MAAI6D,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG9D,KAApB,EAA2B8D,CAAC,EAA5B,EAAgC;AAC5BD,IAAAA,MAAM,IAAIF,IAAV;AACH;;AACD,SAAOE,MAAP;AACH,CAND;;AAOA,OAAO,IAAIE,aAAa,GAAG,UAASC,MAAT,EAAiB/D,SAAjB,EAA4B;AACnD,MAAIgE,UAAU,GAAG,EAAjB;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,UAAJ;AACA,MAAIC,QAAQ,GAAG,EAAf;;AACA,MAAIC,eAAe,GAAG,YAAW;AAC7B,QAAIH,QAAJ,EAAc;AACVE,MAAAA,QAAQ,CAACE,IAAT,CAAc,MAAMJ,QAAN,GAAiB,GAA/B;AACAD,MAAAA,UAAU,IAAIpE,YAAY,CAACqE,QAAD,CAAZ,GAAyB,GAAvC;AACAA,MAAAA,QAAQ,GAAG,EAAX;AACH;AACJ,GAND;;AAOA,OAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGE,MAAM,CAACO,MAA3B,EAAmCT,CAAC,EAApC,EAAwC;AACpC,QAAIH,IAAI,GAAGK,MAAM,CAACF,CAAD,CAAjB;AACA,QAAIU,YAAY,GAAG,QAAQb,IAA3B;AACA,QAAIc,UAAU,GAAGjE,eAAe,CAACmD,IAAD,CAAhC;;AACA,QAAIa,YAAJ,EAAkB;AACdL,MAAAA,UAAU,GAAG,CAACA,UAAd;;AACA,UAAI,QAAQH,MAAM,CAACF,CAAC,GAAG,CAAL,CAAlB,EAA2B;AACvB;AACH;AACJ;;AACD,QAAIW,UAAU,IAAI,CAACN,UAAnB,EAA+B;AAC3B,UAAInE,KAAK,GAAG0D,gBAAgB,CAACM,MAAD,EAASF,CAAT,CAA5B;AACA,UAAIY,OAAO,GAAGd,aAAa,CAACD,IAAD,EAAO3D,KAAP,CAA3B;AACAqE,MAAAA,eAAe;AACfD,MAAAA,QAAQ,CAACE,IAAT,CAAcI,OAAd;AACAT,MAAAA,UAAU,IAAI,MAAMQ,UAAU,CAACzE,KAAD,EAAQC,SAAR,CAAhB,GAAqC,GAAnD;AACA6D,MAAAA,CAAC,IAAI9D,KAAK,GAAG,CAAb;AACH,KAPD,MAOO;AACH,UAAI,CAACkE,QAAL,EAAe;AACXD,QAAAA,UAAU,IAAI,GAAd;AACH;;AACDC,MAAAA,QAAQ,IAAIP,IAAZ;AACH;AACJ;;AACDU,EAAAA,eAAe;AACf,SAAO;AACHD,IAAAA,QAAQ,EAAEA,QADP;AAEHO,IAAAA,MAAM,EAAE,IAAIC,MAAJ,CAAW,MAAMX,UAAN,GAAmB,GAA9B,EAAmC,GAAnC;AAFL,GAAP;AAIH,CAzCM;AA0CP,OAAO,IAAIY,iBAAiB,GAAG,YAAW;AACtC,SAAO1B,eAAP;AACH,CAFM;;AAGP,IAAI2B,cAAc,GAAG,UAAS1B,IAAT,EAAesB,OAAf,EAAwBtC,IAAxB,EAA8BnC,SAA9B,EAAyCoD,cAAzC,EAAyD;AAC1E,MAAI0B,WAAW,GAAGL,OAAO,CAAC,CAAD,CAAzB;AACA,MAAIM,UAAU,GAAG7B,eAAe,CAAC4B,WAAD,CAAhC;AACA,MAAIE,UAAU,GAAGvC,eAAe,CAACqC,WAAD,CAAhC;;AACA,MAAIC,UAAU,IAAIC,UAAlB,EAA8B;AAC1B,QAAIlD,KAAK,GAAGkD,UAAU,CAAC7C,IAAD,EAAOsC,OAAO,CAACH,MAAf,EAAuBtE,SAAvB,CAAtB;AACAoD,IAAAA,cAAc,CAACqB,OAAD,CAAd,GAA0B3C,KAA1B;;AACA,QAAIqB,IAAI,CAAC4B,UAAD,CAAR,EAAsB;AAClB5B,MAAAA,IAAI,CAAC4B,UAAD,CAAJ,CAAiBjD,KAAjB;AACH,KAFD,MAEO;AACHiD,MAAAA,UAAU,CAAC5B,IAAD,EAAOrB,KAAP,EAAcsB,cAAd,CAAV;AACH;AACJ;AACJ,CAbD;;AAcA,IAAI6B,qBAAqB,GAAG,UAAS9B,IAAT,EAAesB,OAAf,EAAwBS,GAAxB,EAA6B;AACrD,MAAIC,UAAU,GAAGjC,eAAe,CAACuB,OAAD,CAAhC;AACA,MAAIW,UAAU,GAAG,MAAMD,UAAU,CAACE,MAAX,CAAkB,CAAlB,CAAvB;AACA,MAAIvD,KAAK,GAAGoD,GAAG,CAACE,UAAD,CAAH,EAAZ;AACAjC,EAAAA,IAAI,CAACgC,UAAD,CAAJ,CAAiBrD,KAAjB;AACH,CALD;;AAMA,IAAIwD,gBAAgB,GAAG,UAASC,YAAT,EAAuB;AAC1C,SAAOA,YAAY,CAACpF,GAAb,CAAkB,UAASsE,OAAT,EAAkB;AACvC,QAAI,QAAQA,OAAO,CAAC,CAAD,CAAnB,EAAwB;AACpB,aAAO,EAAP;AACH,KAFD,MAEO;AACH,aAAO,QAAQA,OAAO,CAAC,CAAD,CAAf,GAAqB,GAArB,GAA2BA,OAAO,CAAC,CAAD,CAAzC;AACH;AACJ,GANM,CAAP;AAOH,CARD;;AASA,IAAIe,yBAAyB,GAAG,UAASrB,QAAT,EAAmB;AAC/C,MAAIsB,OAAO,GAAGtB,QAAQ,CAAChE,GAAT,CAAc,UAASsE,OAAT,EAAkB;AAC1C,WAAOxB,gBAAgB,CAAChB,OAAjB,CAAyBwC,OAAzB,CAAP;AACH,GAFa,CAAd;AAGA,SAAO3B,IAAI,CAACC,GAAL,CAAS2C,KAAT,CAAe5C,IAAf,EAAqB2C,OAArB,CAAP;AACH,CALD;;AAMA,IAAIE,wBAAwB,GAAG,UAASC,cAAT,EAAyB;AACpD,MAAIC,aAAa,GAAGD,cAAc,CAACrD,MAAf,CAAuB,UAASkC,OAAT,EAAkB;AACzD,WAAOxB,gBAAgB,CAAChB,OAAjB,CAAyBwC,OAAzB,IAAoC,CAA3C;AACH,GAFmB,CAApB;AAGA,SAAOxB,gBAAgB,CAACxC,MAAjB,CAAwBoF,aAAxB,CAAP;AACH,CALD;;AAMA,OAAO,IAAIC,SAAS,GAAG,UAAS/B,MAAT,EAAiB/D,SAAjB,EAA4B;AAC/C,MAAI+F,UAAU,GAAGjC,aAAa,CAACC,MAAD,EAAS/D,SAAT,CAA9B;AACA,SAAO,UAASmC,IAAT,EAAe;AAClB,QAAI6D,YAAY,GAAGD,UAAU,CAACrB,MAAX,CAAkBuB,IAAlB,CAAuB9D,IAAvB,CAAnB;;AACA,QAAI6D,YAAJ,EAAkB;AACd,UAAId,GAAG,GAAG,IAAIgB,IAAJ,EAAV;AACA,UAAI/C,IAAI,GAAG,IAAI+C,IAAJ,CAAShB,GAAG,CAACiB,WAAJ,EAAT,EAA4B,CAA5B,EAA+B,CAA/B,CAAX;AACA,UAAIP,cAAc,GAAGN,gBAAgB,CAACS,UAAU,CAAC5B,QAAZ,CAArC;AACA,UAAIiC,eAAe,GAAGZ,yBAAyB,CAACI,cAAD,CAA/C;AACA,UAAIS,qBAAqB,GAAGV,wBAAwB,CAACC,cAAD,CAApD;AACA,UAAIxC,cAAc,GAAG,EAArB;AACAiD,MAAAA,qBAAqB,CAACC,OAAtB,CAA+B,UAAS7B,OAAT,EAAkBjC,KAAlB,EAAyB;AACpD,YAAI,CAACiC,OAAD,IAAYjC,KAAK,GAAGS,gBAAgB,CAACqB,MAAzB,IAAmC9B,KAAK,GAAG4D,eAA3D,EAA4E;AACxE;AACH;;AACD,YAAIG,YAAY,GAAGX,cAAc,CAAC3D,OAAf,CAAuBwC,OAAvB,CAAnB;;AACA,YAAI8B,YAAY,IAAI,CAApB,EAAuB;AACnB,cAAIC,aAAa,GAAGT,UAAU,CAAC5B,QAAX,CAAoBoC,YAApB,CAApB;AACA,cAAIE,UAAU,GAAGT,YAAY,CAACO,YAAY,GAAG,CAAhB,CAA7B;AACA1B,UAAAA,cAAc,CAAC1B,IAAD,EAAOqD,aAAP,EAAsBC,UAAtB,EAAkCzG,SAAlC,EAA6CoD,cAA7C,CAAd;AACH,SAJD,MAIO;AACH6B,UAAAA,qBAAqB,CAAC9B,IAAD,EAAOsB,OAAP,EAAgBS,GAAhB,CAArB;AACH;AACJ,OAZD;AAaA,aAAO/B,IAAP;AACH;;AACD,WAAO,IAAP;AACH,GAzBD;AA0BH,CA5BM","sourcesContent":["/**\r\n * DevExtreme (esm/localization/ldml/date.parser.js)\r\n * Version: 21.1.4\r\n * Build date: Mon Jun 21 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    escapeRegExp\r\n} from \"../../core/utils/common\";\r\nvar FORMAT_TYPES = {\r\n    3: \"abbreviated\",\r\n    4: \"wide\",\r\n    5: \"narrow\"\r\n};\r\nvar monthRegExpGenerator = function(count, dateParts) {\r\n    if (count > 2) {\r\n        return Object.keys(FORMAT_TYPES).map((function(count) {\r\n            return [\"format\", \"standalone\"].map((function(type) {\r\n                return dateParts.getMonthNames(FORMAT_TYPES[count], type).join(\"|\")\r\n            })).join(\"|\")\r\n        })).join(\"|\")\r\n    }\r\n    return \"0?[1-9]|1[012]\"\r\n};\r\nvar PATTERN_REGEXPS = {\r\n    \":\": function(count, dateParts) {\r\n        var countSuffix = count > 1 ? \"{\".concat(count, \"}\") : \"\";\r\n        return \"\\\\\".concat(dateParts.getTimeSeparator()).concat(countSuffix)\r\n    },\r\n    y: function(count) {\r\n        return \"[0-9]+\"\r\n    },\r\n    M: monthRegExpGenerator,\r\n    L: monthRegExpGenerator,\r\n    Q: function(count, dateParts) {\r\n        if (count > 2) {\r\n            return dateParts.getQuarterNames(FORMAT_TYPES[count], \"format\").join(\"|\")\r\n        }\r\n        return \"0?[1-4]\"\r\n    },\r\n    E: function(count, dateParts) {\r\n        return \"\\\\D*\"\r\n    },\r\n    a: function(count, dateParts) {\r\n        return dateParts.getPeriodNames(FORMAT_TYPES[count < 3 ? 3 : count], \"format\").join(\"|\")\r\n    },\r\n    d: function(count) {\r\n        return \"0?[1-9]|[12][0-9]|3[01]\"\r\n    },\r\n    H: function(count) {\r\n        return \"0?[0-9]|1[0-9]|2[0-3]\"\r\n    },\r\n    h: function(count) {\r\n        return \"0?[1-9]|1[012]\"\r\n    },\r\n    m: function(count) {\r\n        return \"0?[0-9]|[1-5][0-9]\"\r\n    },\r\n    s: function(count) {\r\n        return \"0?[0-9]|[1-5][0-9]\"\r\n    },\r\n    S: function(count) {\r\n        return \"[0-9]{1,\" + count + \"}\"\r\n    },\r\n    w: function(count) {\r\n        return \"0?[0-9]|[1-5][0-9]\"\r\n    }\r\n};\r\nvar parseNumber = Number;\r\nvar caseInsensitiveIndexOf = function(array, value) {\r\n    return array.map(item => item.toLowerCase()).indexOf(value.toLowerCase())\r\n};\r\nvar monthPatternParser = function(text, count, dateParts) {\r\n    if (count > 2) {\r\n        return [\"format\", \"standalone\"].map((function(type) {\r\n            return Object.keys(FORMAT_TYPES).map((function(count) {\r\n                var monthNames = dateParts.getMonthNames(FORMAT_TYPES[count], type);\r\n                return caseInsensitiveIndexOf(monthNames, text)\r\n            }))\r\n        })).reduce((function(a, b) {\r\n            return a.concat(b)\r\n        })).filter((function(index) {\r\n            return index >= 0\r\n        }))[0]\r\n    }\r\n    return parseNumber(text) - 1\r\n};\r\nvar PATTERN_PARSERS = {\r\n    y: function(text, count) {\r\n        var year = parseNumber(text);\r\n        if (2 === count) {\r\n            return year < 30 ? 2e3 + year : 1900 + year\r\n        }\r\n        return year\r\n    },\r\n    M: monthPatternParser,\r\n    L: monthPatternParser,\r\n    Q: function(text, count, dateParts) {\r\n        if (count > 2) {\r\n            return dateParts.getQuarterNames(FORMAT_TYPES[count], \"format\").indexOf(text)\r\n        }\r\n        return parseNumber(text) - 1\r\n    },\r\n    E: function(text, count, dateParts) {\r\n        var dayNames = dateParts.getDayNames(FORMAT_TYPES[count < 3 ? 3 : count], \"format\");\r\n        return caseInsensitiveIndexOf(dayNames, text)\r\n    },\r\n    a: function(text, count, dateParts) {\r\n        var periodNames = dateParts.getPeriodNames(FORMAT_TYPES[count < 3 ? 3 : count], \"format\");\r\n        return caseInsensitiveIndexOf(periodNames, text)\r\n    },\r\n    d: parseNumber,\r\n    H: parseNumber,\r\n    h: parseNumber,\r\n    m: parseNumber,\r\n    s: parseNumber,\r\n    S: function(text, count) {\r\n        count = Math.max(count, 3);\r\n        text = text.slice(0, 3);\r\n        while (count < 3) {\r\n            text += \"0\";\r\n            count++\r\n        }\r\n        return parseNumber(text)\r\n    }\r\n};\r\nvar ORDERED_PATTERNS = [\"y\", \"M\", \"d\", \"h\", \"m\", \"s\", \"S\"];\r\nvar PATTERN_SETTERS = {\r\n    y: \"setFullYear\",\r\n    M: \"setMonth\",\r\n    L: \"setMonth\",\r\n    a: function(date, value, datePartValues) {\r\n        var hours = date.getHours();\r\n        var hourPartValue = datePartValues.h;\r\n        if (void 0 !== hourPartValue && hourPartValue !== hours) {\r\n            hours--\r\n        }\r\n        if (!value && 12 === hours) {\r\n            hours = 0\r\n        } else if (value && 12 !== hours) {\r\n            hours += 12\r\n        }\r\n        date.setHours(hours)\r\n    },\r\n    d: \"setDate\",\r\n    H: \"setHours\",\r\n    h: \"setHours\",\r\n    m: \"setMinutes\",\r\n    s: \"setSeconds\",\r\n    S: \"setMilliseconds\"\r\n};\r\nvar getSameCharCount = function(text, index) {\r\n    var char = text[index];\r\n    var count = 0;\r\n    do {\r\n        index++;\r\n        count++\r\n    } while (text[index] === char);\r\n    return count\r\n};\r\nvar createPattern = function(char, count) {\r\n    var result = \"\";\r\n    for (var i = 0; i < count; i++) {\r\n        result += char\r\n    }\r\n    return result\r\n};\r\nexport var getRegExpInfo = function(format, dateParts) {\r\n    var regexpText = \"\";\r\n    var stubText = \"\";\r\n    var isEscaping;\r\n    var patterns = [];\r\n    var addPreviousStub = function() {\r\n        if (stubText) {\r\n            patterns.push(\"'\" + stubText + \"'\");\r\n            regexpText += escapeRegExp(stubText) + \")\";\r\n            stubText = \"\"\r\n        }\r\n    };\r\n    for (var i = 0; i < format.length; i++) {\r\n        var char = format[i];\r\n        var isEscapeChar = \"'\" === char;\r\n        var regexpPart = PATTERN_REGEXPS[char];\r\n        if (isEscapeChar) {\r\n            isEscaping = !isEscaping;\r\n            if (\"'\" !== format[i - 1]) {\r\n                continue\r\n            }\r\n        }\r\n        if (regexpPart && !isEscaping) {\r\n            var count = getSameCharCount(format, i);\r\n            var pattern = createPattern(char, count);\r\n            addPreviousStub();\r\n            patterns.push(pattern);\r\n            regexpText += \"(\" + regexpPart(count, dateParts) + \")\";\r\n            i += count - 1\r\n        } else {\r\n            if (!stubText) {\r\n                regexpText += \"(\"\r\n            }\r\n            stubText += char\r\n        }\r\n    }\r\n    addPreviousStub();\r\n    return {\r\n        patterns: patterns,\r\n        regexp: new RegExp(\"^\" + regexpText + \"$\", \"i\")\r\n    }\r\n};\r\nexport var getPatternSetters = function() {\r\n    return PATTERN_SETTERS\r\n};\r\nvar setPatternPart = function(date, pattern, text, dateParts, datePartValues) {\r\n    var patternChar = pattern[0];\r\n    var partSetter = PATTERN_SETTERS[patternChar];\r\n    var partParser = PATTERN_PARSERS[patternChar];\r\n    if (partSetter && partParser) {\r\n        var value = partParser(text, pattern.length, dateParts);\r\n        datePartValues[pattern] = value;\r\n        if (date[partSetter]) {\r\n            date[partSetter](value)\r\n        } else {\r\n            partSetter(date, value, datePartValues)\r\n        }\r\n    }\r\n};\r\nvar setPatternPartFromNow = function(date, pattern, now) {\r\n    var setterName = PATTERN_SETTERS[pattern];\r\n    var getterName = \"g\" + setterName.substr(1);\r\n    var value = now[getterName]();\r\n    date[setterName](value)\r\n};\r\nvar getShortPatterns = function(fullPatterns) {\r\n    return fullPatterns.map((function(pattern) {\r\n        if (\"'\" === pattern[0]) {\r\n            return \"\"\r\n        } else {\r\n            return \"H\" === pattern[0] ? \"h\" : pattern[0]\r\n        }\r\n    }))\r\n};\r\nvar getMaxOrderedPatternIndex = function(patterns) {\r\n    var indexes = patterns.map((function(pattern) {\r\n        return ORDERED_PATTERNS.indexOf(pattern)\r\n    }));\r\n    return Math.max.apply(Math, indexes)\r\n};\r\nvar getOrderedFormatPatterns = function(formatPatterns) {\r\n    var otherPatterns = formatPatterns.filter((function(pattern) {\r\n        return ORDERED_PATTERNS.indexOf(pattern) < 0\r\n    }));\r\n    return ORDERED_PATTERNS.concat(otherPatterns)\r\n};\r\nexport var getParser = function(format, dateParts) {\r\n    var regExpInfo = getRegExpInfo(format, dateParts);\r\n    return function(text) {\r\n        var regExpResult = regExpInfo.regexp.exec(text);\r\n        if (regExpResult) {\r\n            var now = new Date;\r\n            var date = new Date(now.getFullYear(), 0, 1);\r\n            var formatPatterns = getShortPatterns(regExpInfo.patterns);\r\n            var maxPatternIndex = getMaxOrderedPatternIndex(formatPatterns);\r\n            var orderedFormatPatterns = getOrderedFormatPatterns(formatPatterns);\r\n            var datePartValues = {};\r\n            orderedFormatPatterns.forEach((function(pattern, index) {\r\n                if (!pattern || index < ORDERED_PATTERNS.length && index > maxPatternIndex) {\r\n                    return\r\n                }\r\n                var patternIndex = formatPatterns.indexOf(pattern);\r\n                if (patternIndex >= 0) {\r\n                    var regExpPattern = regExpInfo.patterns[patternIndex];\r\n                    var regExpText = regExpResult[patternIndex + 1];\r\n                    setPatternPart(date, regExpPattern, regExpText, dateParts, datePartValues)\r\n                } else {\r\n                    setPatternPartFromNow(date, pattern, now)\r\n                }\r\n            }));\r\n            return date\r\n        }\r\n        return null\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}